using System.Text.Json;
using DataModel;
using LinqToDB;
using LinqToDB.DataProvider.SqlServer;

var options = new DataOptions()
  .UseSqlServer(@"Server=.\SQLEXPRESS; Integrated Security=true; Database=northwind; Encrypt=True; TrustServerCertificate=True", SqlServerVersion.AutoDetect, SqlServerProvider.MicrosoftDataSqlClient);
using var dataContext = new NorthwindDb(new DataOptions<NorthwindDb>(options));

int[] orderIds = new int[] { 10258, 10270, 10275, 10285, 10292, 10293, 10304, 10306, 10311, 10314, 10316, 10325, 10340, 10351, 10357, 10361, 10364, 10371, 10374, 10376, 10377, 10385, 10387, 10393, 10394, 10396, 10400, 10401, 10405, 10453, 10461, 10465, 10469, 10473, 10482, 10486, 10508, 10524, 10525, 10537, 10542, 10546, 10558, 10562, 10567, 10579, 10587, 10591, 10598, 10604, 10605, 10612, 10616, 10618, 10626, 10630, 10653, 10655, 10664, 10665, 10668, 10671, 10677, 10680, 10689, 10690, 10709, 10710, 10713, 10717, 10718, 10733, 10743, 10746, 10773, 10776, 10785, 10788, 10789, 10792, 10800, 10813, 10821, 10825, 10827, 10834, 10835, 10842, 10850, 10859, 10877, 10886, 10888, 10894, 10900, 10902, 10909, 10910, 10916, 10921, 10928, 10946, 10950, 10952, 10968, 10969, 10975, 10976, 10981, 10984, 10991, 10992, 10995, 11012, 11023, 11027, 11038, 11039, 11064, 11067, 11069, 11071, 11077, 10265, 10277, 10280, 10295, 10300, 10307, 10312, 10313, 10327, 10339, 10345, 10368, 10379, 10388, 10392, 10398, 10404, 10407, 10414, 10422, 10457, 10462, 10471, 10478, 10487, 10502, 10515, 10516, 10541, 10552, 10553, 10556, 10561, 10563, 10583, 10588, 10595, 10615, 10620, 10657, 10663, 10669, 10673, 10676, 10683, 10686, 10691, 10727, 10734, 10737, 10738, 10752, 10780, 10781, 10787, 10798, 10805, 10808, 10810, 10815, 10819, 10832, 10846, 10858, 10865, 10912, 10915, 10919, 10939, 10949, 10967, 10971, 10982, 10983, 10985, 10989, 10990, 10994, 11000, 11001, 11005, 11009, 11010, 11013, 11014, 11015, 11020, 11028, 11032, 11035, 11042, 11053, 11059, 11060, 11070, 11073, 10251, 10253, 10256, 10266, 10273, 10283, 10309, 10321, 10330, 10332, 10346, 10352, 10362, 10365, 10375, 10381, 10384, 10391, 10409, 10410, 10413, 10415, 10420, 10429, 10432, 10433, 10434, 10436, 10438, 10441, 10442, 10444, 10445, 10449, 10468, 10479, 10484, 10492, 10495, 10505, 10514, 10517, 10530, 10536, 10540, 10547, 10548, 10568, 10570, 10572, 10576, 10581, 10582, 10592, 10594, 10619, 10625, 10638, 10644, 10662, 10681, 10682, 10684, 10693, 10697, 10699, 10700, 10712, 10715, 10723, 10732, 10739, 10742, 10748, 10751, 10753, 10758, 10759, 10762, 10763, 10765, 10768, 10769, 10772, 10778, 10779, 10793, 10796, 10806, 10814, 10817, 10820, 10831, 10838, 10839, 10854, 10855, 10856, 10860, 10879, 10895, 10897, 10903, 10904, 10911, 10918, 10924, 10925, 10934, 10936, 10938, 10947, 10948, 10960, 10964, 10974, 10988, 11003, 11004, 11006, 11011, 11021, 11041, 11049, 11052, 11057, 11063, 10250, 10252, 10257, 10259, 10260, 10261, 10267, 10281, 10282, 10284, 10288, 10294, 10299, 10302, 10315, 10323, 10326, 10328, 10329, 10337, 10338, 10342, 10343, 10344, 10347, 10348, 10360, 10363, 10373, 10382, 10389, 10403, 10417, 10418, 10419, 10426, 10427, 10430, 10431, 10440, 10447, 10448, 10451, 10454, 10459, 10464, 10466, 10470, 10485, 10493, 10494, 10499, 10504, 10509, 10511, 10518, 10522, 10526, 10535, 10544, 10551, 10554, 10564, 10574, 10578, 10580, 10584, 10590, 10600, 10606, 10608, 10613, 10617, 10621, 10622, 10624, 10628, 10629, 10634, 10636, 10640, 10641, 10645, 10647, 10652, 10658, 10670, 10674, 10685, 10688, 10692, 10698, 10702, 10707, 10716, 10725, 10726, 10728, 10740, 10741, 10749, 10755, 10760, 10766, 10767, 10774, 10783, 10784, 10801, 10802, 10803, 10807, 10816, 10830, 10840, 10843, 10847, 10861, 10863, 10864, 10873, 10875, 10878, 10881, 10882, 10884, 10892, 10898, 10901, 10906, 10908, 10913, 10917, 10920, 10926, 10927, 10930, 10931, 10935, 10943, 10945, 10966, 10972, 10980, 10996, 11002, 11018, 11024, 11026, 11029, 11040, 11044, 11061, 11062, 11072, 11076, 10248, 10254, 10269, 10297, 10320, 10333, 10358, 10359, 10372, 10378, 10397, 10463, 10474, 10477, 10529, 10549, 10569, 10575, 10607, 10648, 10649, 10650, 10654, 10675, 10711, 10714, 10721, 10730, 10761, 10812, 10823, 10841, 10851, 10866, 10869, 10870, 10872, 10874, 10899, 10922, 10954, 11043, 10249, 10264, 10271, 10272, 10274, 10291, 10296, 10298, 10317, 10350, 10355, 10356, 10370, 10390, 10395, 10423, 10425, 10439, 10446, 10480, 10489, 10500, 10503, 10510, 10519, 10528, 10539, 10555, 10559, 10599, 10611, 10637, 10643, 10656, 10701, 10703, 10704, 10708, 10735, 10744, 10747, 10754, 10757, 10764, 10790, 10791, 10794, 10804, 10822, 10826, 10833, 10867, 10885, 10907, 10914, 10929, 10933, 10944, 10956, 10959, 10965, 10973, 10999, 11019, 11025, 11031, 11045, 10289, 10303, 10308, 10319, 10322, 10335, 10336, 10341, 10349, 10353, 10367, 10406, 10424, 10428, 10458, 10483, 10490, 10496, 10497, 10507, 10512, 10513, 10520, 10523, 10527, 10531, 10532, 10550, 10573, 10585, 10593, 10597, 10601, 10609, 10633, 10639, 10642, 10659, 10661, 10666, 10667, 10678, 10695, 10731, 10775, 10777, 10797, 10809, 10818, 10836, 10848, 10868, 10876, 10880, 10890, 10891, 10896, 10923, 10937, 10941, 10958, 10993, 11008, 11030, 11033, 11037, 11047, 11048, 11051, 11055, 11066, 11074, 10262, 10268, 10276, 10278, 10279, 10286, 10287, 10290, 10301, 10305, 10310, 10318, 10334, 10354, 10366, 10369, 10380, 10383, 10399, 10402, 10408, 10412, 10416, 10421, 10435, 10437, 10443, 10450, 10452, 10455, 10456, 10460, 10467, 10472, 10476, 10481, 10488, 10491, 10498, 10521, 10533, 10534, 10543, 10545, 10560, 10565, 10571, 10589, 10596, 10602, 10603, 10610, 10614, 10623, 10627, 10631, 10632, 10635, 10651, 10660, 10679, 10694, 10696, 10706, 10719, 10720, 10722, 10724, 10729, 10756, 10770, 10786, 10795, 10811, 10824, 10844, 10845, 10852, 10857, 10862, 10883, 10887, 10932, 10940, 10955, 10957, 10961, 10962, 10977, 10979, 10986, 10987, 10997, 10998, 11007, 11034, 11036, 11046, 11050, 11054, 11056, 11065, 11068, 11075, 10255, 10263, 10324, 10331, 10386, 10411, 10475, 10501, 10506, 10538, 10557, 10566, 10577, 10586, 10646, 10672, 10687, 10705, 10736, 10745, 10750, 10771, 10782, 10799, 10828, 10829, 10837, 10849, 10853, 10871, 10889, 10893, 10905, 10942, 10951, 10953, 10963, 10970, 10978, 11016, 11017, 11022, 11058 };
string[] territoryIds = new int[] { 06897, 19713, 01581, 01730, 01833, 02116, 02139, 02184, 40222, 30346, 31406, 32859, 33607, 20852, 27403, 27511, 02903, 07960, 08837, 10019, 10038, 11747, 14450, 85014, 85251, 98004, 98052, 98104, 60179, 60601, 80202, 80909, 90405, 94025, 94105, 95008, 95054, 95060, 19428, 44122, 45839, 53404, 03049, 03801, 48075, 48084, 48304, 55113, 55439 }.Select(oi => oi.ToString()).ToArray();

var tempOrderIds = dataContext.CreateTempTable("tempOrderIds", items: orderIds.Select(Id => new { Id }));
var tempTerritoryIds = dataContext.CreateTempTable("tempTerritoryIds", items: territoryIds.Select(Id => new { Id }));

var result = dataContext.Employees
.GroupJoin(dataContext.EmployeeTerritories, left => left.EmployeeId, right => right.EmployeeId, (Employee, EmployeeTerritories) => new { Employee, EmployeeTerritories })
.GroupJoin(dataContext.Orders, left => left.Employee.EmployeeId, right => right.EmployeeId, (left, Orders) => new
{
    left.Employee,
    left.EmployeeTerritories,
    Orders,
})
.Where(x =>
    x.EmployeeTerritories.Any(et => tempTerritoryIds.Any(ti => ti.Id == et.TerritoryId)) &&
    x.Orders.Any(o => tempOrderIds.Any(oi => oi.Id == o.OrderId))
)
.Select(x => new
{
    x.Employee,
    Territories = x.EmployeeTerritories.Select(et => dataContext.Territories.Single(t => t.TerritoryId == et.TerritoryId)),
    x.Orders,
})
.Take(2)
.ToArray();

var json = JsonSerializer.Serialize(result, new JsonSerializerOptions()
{
    WriteIndented = true,
});
// Console.WriteLine(json);
File.WriteAllText("./-bruh.json", json);
